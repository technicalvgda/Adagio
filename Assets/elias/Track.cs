//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Text;
using Elias;

namespace Elias
{
	[Serializable] 	
	public class Track
	{
		//This macro is necessary because on iOS the functions are read from a static library,
		//	and are thereby not in an external shared library.
#if UNITY_IOS && !UNITY_EDITOR
		private const string ELIAS_DLL_NAME = "__Internal";
#else
		private const string ELIAS_DLL_NAME = "elias";
#endif
		//TODO: This is currently not being serialized by Unity when doing hot reloads!
		public IntPtr Handle = IntPtr.Zero;

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_create_audio_loop_track")]
		private static extern int elias_track_create_audio_loop_track(out IntPtr track);
		public static Track CreateAudioLoopTrack()
		{
			IntPtr h;

			int res = elias_track_create_audio_loop_track(out h);

			if(res == 0)
			{
				return new Track(h);
			} 
			else 
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_create_audio_stinger_track")]
		private static extern int elias_track_create_audio_stinger_track(out IntPtr track);
		public static Track CreateAudioStingerTrack()
		{
			IntPtr h;
			
			int res = elias_track_create_audio_stinger_track(out h);
			
			if(res == 0)
			{
				return new Track(h);
			} 
			else 
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}		

		private Track (IntPtr handle)
		{
			Handle = handle;
		}


		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_add_trigger")]
		private static extern int elias_track_add_trigger(IntPtr track, int key, int trigger, uint length_in_samples);
		public void AddTrigger(int key, int trigger, uint length_in_samples)
		{

			int res = elias_track_add_trigger(this.Handle, key, trigger, length_in_samples);

			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_add_dummy_trigger")]
		private static extern int elias_track_add_dummy_trigger(IntPtr track, int key, int trigger);
		public void AddDummyTrigger(int key, int trigger)
		{
			
			int res = elias_track_add_dummy_trigger(this.Handle, key, trigger);
			
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_add_stinger")]
		private static extern int elias_track_add_stinger(IntPtr track, int key, int stinger, uint length_in_samples);
		public void AddStinger(int key, int stinger, uint length_in_samples)
		{
			
			int res = elias_track_add_stinger(this.Handle, key, stinger, length_in_samples);
			
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_source_filename", CharSet = CharSet.Unicode)]
		private static extern int elias_track_set_source_filename(IntPtr track, int key, int source, IntPtr filename);
		public void SetSourceFileName(int key, int source, string filename)
		{

			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (filename);
			int res = elias_track_set_source_filename(this.Handle, key, source, s);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}


		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_source_filename", CharSet = CharSet.Unicode)]
		private static extern int elias_track_get_source_filename(IntPtr track, int key, int source, IntPtr filename, ref uint count);
		public string GetSourceFileName(int key, int source)
		{
			uint sz = 0;
			int res = elias_track_get_source_filename(this.Handle, key, source, IntPtr.Zero, ref sz);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			IntPtr s = UTF8MarshallingHelpers.CreateOutputStringPointer ((int)sz);
			res = elias_track_get_source_filename(this.Handle, key, source, s, ref sz);
			string sourceFileName = UTF8MarshallingHelpers.ConvertFromNativeUTF8 (s);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}

			return sourceFileName;
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_clear")]
		private static extern int elias_track_clear(IntPtr track);
		public void Clear()
		{
			int res = elias_track_clear(this.Handle);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}

		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_reverb_size")]
		private static extern int elias_track_set_reverb_size(IntPtr track, uint size);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_reverb_size")]
		private static extern int elias_track_get_reverb_size(IntPtr track, ref uint size);

		public uint ReverbSize
		{
			set
			{
				int res = elias_track_set_reverb_size(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}

			get
			{
				uint u = 0;
				int res = elias_track_get_reverb_size(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	

				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_reverb_damping")]
		private static extern int elias_track_set_reverb_damping(IntPtr track, uint damping);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_reverb_damping")]
		private static extern int elias_track_get_reverb_damping(IntPtr track, ref uint damping);
		public uint ReverbDamping
		{
			set
			{
				int res = elias_track_set_reverb_damping(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_reverb_damping(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_reverb_mix")]
		private static extern int elias_track_set_reverb_mix(IntPtr track, uint mix);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_reverb_mix")]
		private static extern int elias_track_get_reverb_mix(IntPtr track, ref uint mix);
		public uint ReverbMix
		{
			set
			{
				int res = elias_track_set_reverb_mix(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_reverb_mix(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_fade_in_minimum")]
		private static extern int elias_track_set_fade_in_minimum(IntPtr track, uint minimum);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_fade_in_minimum")]
		private static extern int elias_track_get_fade_in_minimum(IntPtr track, ref uint minimum);
		public uint FadeInMinimum
		{
			set
			{
				int res = elias_track_set_fade_in_minimum(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_fade_in_minimum(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_fade_in_maximum")]
		private static extern int elias_track_set_fade_in_maximum(IntPtr track, uint maximum);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_fade_in_maximum")]
		private static extern int elias_track_get_fade_in_maximum(IntPtr track, ref uint maximum);
		public uint FadeInMaximum
		{
			set
			{
				int res = elias_track_set_fade_in_maximum(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_fade_in_maximum(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_crossfade_minimum")]
		private static extern int elias_track_set_crossfade_minimum(IntPtr track, uint minimum);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_crossfade_minimum")]
		private static extern int elias_track_get_crossfade_minimum(IntPtr track, ref uint minimum);
		public uint CrossfadeMinimum
		{
			set
			{
				int res = elias_track_set_crossfade_minimum(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_crossfade_minimum(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_crossfade_maximum")]
		private static extern int elias_track_set_crossfade_maximum(IntPtr track, uint maximum);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_crossfade_maximum")]
		private static extern int elias_track_get_crossfade_maximum(IntPtr track, ref uint maximum); 
		public uint CrossfadeMaximum
		{
			set
			{
				int res = elias_track_set_crossfade_maximum(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_crossfade_maximum(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_fade_out_minimum")]
		private static extern int elias_track_set_fade_out_minimum(IntPtr track, uint minimum);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_fade_out_minimum")]
		private static extern int elias_track_get_fade_out_minimum(IntPtr track, ref uint minimum);
		public uint FadeOutMinimum
		{
			set
			{
				int res = elias_track_set_fade_out_minimum(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_fade_out_minimum(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_fade_out_maximum")]
		private static extern int elias_track_set_fade_out_maximum(IntPtr track, uint maximum);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_fade_out_maximum")]
		private static extern int elias_track_get_fade_out_maximum(IntPtr track, ref uint maximum); 
		public uint FadeOutMaximum
		{
			set
			{
				int res = elias_track_set_fade_out_maximum(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_fade_out_maximum(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_agility")]
		private static extern int elias_track_set_agility(IntPtr track, int agility);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_agility")]
		private static extern int elias_track_get_agility(IntPtr track, ref int agility);
		public int Agility
		{
			set
			{
				int res = elias_track_set_agility(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int u = 0;
				int res = elias_track_get_agility(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_agility_beat_points")]
		private static extern int elias_track_set_agility_beat_points(IntPtr track, uint[] beat_points, uint count);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_agility_beat_points")]
		private static extern int elias_track_get_agility_beat_points(IntPtr track, uint[] beat_points, ref uint count);
		public uint[] AgilityBeatPoints
		{
			set
			{
				uint sz = (uint)value.Length;
				int res = elias_track_set_agility_beat_points(this.Handle, value, sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint sz = 0;
				int res = elias_track_get_agility_beat_points(this.Handle, null, ref sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}

				uint[] arr = new uint[sz];
				res = elias_track_get_agility_beat_points(this.Handle, arr, ref sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}

				return arr;
			}

		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_agility_strict")]
		private static extern int elias_track_set_agility_strict(IntPtr track, int strict);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_agility_strict")]
		private static extern int elias_track_get_agility_strict(IntPtr track, ref int strict);
		public int AgilityStrict
		{
			set
			{
				int res = elias_track_set_agility_strict(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int u = 0;
				int res = elias_track_get_agility_strict(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_stinger_progression")]
		private static extern int elias_track_set_stinger_progression(IntPtr track, int progression);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_stinger_progression")]
		private static extern int elias_track_get_stinger_progression(IntPtr track, ref int progression);
		public StingerProgressions StingerProgression
		{
			set
			{
				int res = elias_track_set_stinger_progression(this.Handle, (int)value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int u = 0;
				int res = elias_track_get_stinger_progression(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return (StingerProgressions)u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_stinger_pickup_beats")]
		private static extern int elias_track_set_stinger_pickup_beats(IntPtr track, uint pickup_beats);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_stinger_pickup_beats")]
		private static extern int elias_track_get_stinger_pickup_beats(IntPtr track, ref uint pickup_beats);
		public uint StingerPickupBeats
		{
			set
			{
				int res = elias_track_set_stinger_pickup_beats(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_track_get_stinger_pickup_beats(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_set_volume")]
		private static extern int elias_track_set_volume(IntPtr track, int volume);
		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_volume")]
		private static extern int elias_track_get_volume(IntPtr track, ref int volume);
		public int Volume
		{
			set
			{
				int res = elias_track_set_volume(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int u = 0;
				int res = elias_track_get_volume(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_get_type")]
		private static extern int elias_track_get_type(IntPtr track, ref int type);
		public TrackType Type
		{
			get
			{
				int u = 0;
				int res = elias_track_get_type(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				
				return (TrackType)u;
			}
		}


		// Flag: Has Dispose already been called? 
		private bool disposed = false;

		[DllImport(ELIAS_DLL_NAME, EntryPoint="elias_track_destroy")]
		private static extern int elias_track_destroy(IntPtr track);
		
		// Public implementation of Dispose pattern callable by consumers. 
		public void Dispose()
		{ 
			Dispose(true);
			GC.SuppressFinalize(this);           
		}
		
		// Protected implementation of Dispose pattern. 
		protected virtual void Dispose(bool disposing)
		{
			if (disposed)
				return; 
			
			if (disposing) {
				int res = elias_track_destroy(this.Handle);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				this.Handle = IntPtr.Zero;
			}
			
			// Free any unmanaged objects here. 
			//
			disposed = true;
		}
	}
}

