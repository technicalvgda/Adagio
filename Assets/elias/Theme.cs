//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Note: Changes have been made!
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Elias
{
	//TODO: Unity still does not serialize the IntPtr from what I can tell, 
	//	causing elias to stop working after a hot reload.
	//	Solution: Custom serialization of the pointer. (IF Unity still keeps the same native stuff loaded!?)
	[Serializable] 
	public class Theme
	{
#if UNITY_IOS && !UNITY_EDITOR
		private const string ELIAS_DLL_NAME = "__Internal";
#else
		private const string ELIAS_DLL_NAME = "elias";
#endif
		public IntPtr Handle = IntPtr.Zero;

		// This one was not automatically generated!
		// ------------------------------------------------------------------------------------------------------------------------------
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]  // Declare calling convention.
		public delegate int SourceEnumerationCallback(ref Source source, ref IntPtr source_user_data, IntPtr user_data);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_enumerate_sources")]
		private static extern int elias_theme_enumerate_sources(IntPtr theme, SourceEnumerationCallback secb, out IntPtr user_data);

		//Note that this function results in syncronous callbacks and will only return when done.
		// It will be done when either: All sources have been enumerated, or if the called function returns 0.
		// Read elias.h or the manual for more information.
		public int EnumerateSources(SourceEnumerationCallback secb) {
			IntPtr user_data = new IntPtr();
			return elias_theme_enumerate_sources(this.Handle, secb, out user_data);
		}
		// ------------------------------------------------------------------------------------------------------------------------------

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_create")]
		private static extern int elias_theme_create(out IntPtr theme, int bpm, int timesig_numerator, int timesig_denominator, int bars, int sample_rate, int channels);
		public static Theme Create(int bpm, int timesig_numerator, int timesig_denominator, int bars, int sample_rate, int channels)
		{
			IntPtr h;

			int res = elias_theme_create(out h, bpm, timesig_numerator, timesig_denominator, bars, sample_rate, channels );
			
			if(res == 0)
			{
				return new Theme(h);
			} 
			else 
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		private Theme (IntPtr handle)
		{
			Handle = handle;
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_add_track")]
		private static extern int elias_theme_add_track(IntPtr theme, int track_id, IntPtr track);
		public void AddTrack(int track_id, Track track)
		{
			int res = elias_theme_add_track(this.Handle, track_id, track.Handle);
			
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_remove_track")]
		private static extern int elias_theme_remove_track(IntPtr theme, int track_id);
		public void RemoveTrack(int track_id)
		{
			int res = elias_theme_remove_track(this.Handle, track_id);
			
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_remove_all_tracks")]
		private static extern int elias_theme_remove_all_tracks(IntPtr theme);
		public void RemoveAllTracks()
		{
			int res = elias_theme_remove_all_tracks(this.Handle);
			
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_prebuffer_length_in_milliseconds")]
		private static extern int elias_theme_set_prebuffer_length_in_milliseconds(IntPtr theme, uint milliseconds);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_prebuffer_length_in_milliseconds")]
		private static extern int elias_theme_get_prebuffer_length_in_milliseconds(IntPtr theme, ref uint milliseconds);
		public uint PrebufferLengthMS
		{
			set
			{
				int res = elias_theme_set_prebuffer_length_in_milliseconds(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_theme_get_prebuffer_length_in_milliseconds(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}		
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_prebuffer_length_in_samples")]
		private static extern int elias_theme_set_prebuffer_length_in_samples(IntPtr theme, uint samples);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_prebuffer_length_in_samples")]
		private static extern int elias_theme_get_prebuffer_length_in_samples(IntPtr theme, ref uint samples);
		public uint PrebufferLengthSamples
		{
			set
			{
				int res = elias_theme_set_prebuffer_length_in_samples(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_theme_get_prebuffer_length_in_samples(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_processing_period_in_milliseconds")]
		private static extern int elias_theme_set_processing_period_in_milliseconds(IntPtr theme, uint milliseconds);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_processing_period_in_milliseconds")]
		private static extern int elias_theme_get_processing_period_in_milliseconds(IntPtr theme, ref uint milliseconds);
		public uint ProcessingPeriodMS
		{
			set
			{
				int res = elias_theme_set_processing_period_in_milliseconds(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_theme_get_processing_period_in_milliseconds(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_processing_period_in_samples")]
		private static extern int elias_theme_set_processing_period_in_samples(IntPtr theme, uint samples);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_processing_period_in_samples")]
		private static extern int elias_theme_get_processing_period_in_samples(IntPtr theme, ref uint samples);
		public uint ProcessingPeriodSamples
		{
			set
			{
				int res = elias_theme_set_processing_period_in_samples(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint u = 0;
				int res = elias_theme_get_processing_period_in_samples(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_mode")]
		private static extern int elias_theme_set_mode(IntPtr theme, int mode);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_mode")]
		private static extern int elias_theme_get_mode(IntPtr theme, ref int mode);
		public int Mode
		{
			set
			{
				int res = elias_theme_set_mode(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int u = 0;

				int res = elias_theme_get_mode(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}			
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_suggested_thread_count")]
		private static extern int elias_theme_set_suggested_thread_count(IntPtr theme, int count);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_suggested_thread_count")]
		private static extern int elias_theme_get_suggested_thread_count(IntPtr theme, ref int count);
		public int SuggestedThreadCount
		{
			set
			{
				int res = elias_theme_set_suggested_thread_count(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int u = 0;
				int res = elias_theme_get_suggested_thread_count(this.Handle, ref u);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}				
				return u;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_start")]
		private static extern int elias_theme_start(IntPtr theme, IntPtr callback, IntPtr user_data, int key, int minimum_level, int maximum_level, int urgency, int stinger, int rendezvous);
		public void Start(int key, int minimum_level, int maximum_level, int urgency, int stinger, int rendezvous)
		{
			int res = elias_theme_start(this.Handle, IntPtr.Zero, IntPtr.Zero, key, minimum_level, maximum_level, urgency, stinger, rendezvous);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}	
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_start_from_action_preset")]
		private static extern int elias_theme_start_from_action_preset(IntPtr theme, IntPtr callback, IntPtr user_data, int key, IntPtr preset_name);
		public void StartFromActionPreset(int key, string actionPreset)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (actionPreset);
			int res = elias_theme_start_from_action_preset(this.Handle, IntPtr.Zero, IntPtr.Zero, key, s);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}	
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_stop")]
		private static extern int elias_theme_stop(IntPtr theme);
		public void Stop()
		{
			int res = elias_theme_stop(this.Handle);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_level")]
		private static extern int elias_theme_set_level(IntPtr theme, int minimum_level, int maximum_level, int urgency, int stinger, int immediately, int rendezvous);
		public void SetLevel(int minimum_level, int maximum_level, int urgency, int stinger, int immediately, int rendezvous)
		{
			int res = elias_theme_set_level(this.Handle, minimum_level, maximum_level, urgency, stinger, immediately, rendezvous);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_request_change")]
		private static extern int elias_theme_request_change(IntPtr theme, int track_count, int urgency, int stinger, int immediately, int rendezvous);
		public void RequestChange(int track_count, int urgency, int stinger, int immediately, int rendezvous)
		{
			int res = elias_theme_request_change(this.Handle, track_count, urgency, stinger, immediately, rendezvous);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_silence")]
		private static extern int elias_theme_silence(IntPtr theme, int urgency, int stinger, int immediately, int rendezvous);
		public void Silence(int urgency, int stinger, int immediately, int rendezvous)
		{
			int res = elias_theme_silence(this.Handle, urgency, stinger, immediately, rendezvous);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_play_stinger")]
		private static extern int elias_theme_play_stinger(IntPtr theme, int stinger);
		public void PlayStinger(int stinger)
		{
			int res = elias_theme_play_stinger(this.Handle, stinger);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_change_key")]
		private static extern int elias_theme_change_key(IntPtr theme, int key, int immediately);
		public void ChangeKey(int key, int immediately)
		{
			int res = elias_theme_change_key(this.Handle, key, immediately);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_trigger_action_preset")]
		private static extern int elias_theme_trigger_action_preset(IntPtr theme, IntPtr preset_name, int immediately);
		public void TriggerActionPreset(string presetName, bool immediately)
		{
			
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (presetName);
			int res = elias_theme_trigger_action_preset(this.Handle,s, immediately ? 1 : 0);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}



		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_is_transitioning")]
		private static extern int elias_theme_is_transitioning(IntPtr theme, ref int transitioning);
		public bool IsTransitioning 
		{
			get 
			{
				int i = 0;
				int res = elias_theme_is_transitioning(this.Handle, ref i);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return i != 0;
			}
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_last_started_event")]
		private static extern int elias_theme_get_last_started_event(IntPtr theme, ref int completed, ref int key, ref int minimum_level, 
		                                                             ref int maximum_level, ref int urgency, ref int stinger, ref int immediately, 
		                                                             ref int rendezvous, ref int action_preset_index);
		public void GetLastStartedEvent(out bool completed, out int key, out int minimumLevel, out int maximumLevel, out int urgency, out int stinger,
		                                out bool immediately, out bool rendezvous, out int action_preset_index)
		{
			int completedInt = 0;
			key = 0;
			minimumLevel = 0;
			maximumLevel = 0;
			urgency = 0;
			stinger = 0;
			int immediatelyInt = 0;
			int rendezvousInt = 0;
			action_preset_index = 0;
			int res = elias_theme_get_last_started_event (this.Handle, ref completedInt, ref key, ref minimumLevel, ref maximumLevel, ref urgency,
			                                              ref stinger, ref immediatelyInt, ref rendezvousInt, ref action_preset_index);
			if (res != 0) {
				ErrorCode e = (ErrorCode)res;
				throw new Exception (e.ToString ());
			}
			completed = completedInt == 1;
			immediately = immediatelyInt == 1;
			rendezvous = rendezvousInt == 1;
		}


		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_cursor_position_in_milliseconds")]
		private static extern int elias_theme_get_cursor_position_in_milliseconds(IntPtr theme, ref uint cursor_position);
		public uint CursorPositionMS
		{
			get
			{
				uint cp = 0;
				int res = elias_theme_get_cursor_position_in_milliseconds(this.Handle, ref cp);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return cp;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_cursor_position_in_samples")]
		private static extern int elias_theme_get_cursor_position_in_samples(IntPtr theme, ref uint cursor_position);
		public uint CursorPositionSamples
		{
			get
			{
				uint cp = 0;
				int res = elias_theme_get_cursor_position_in_samples(this.Handle, ref cp);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return cp;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_cursor_position_in_beats")]
		private static extern int elias_theme_get_cursor_position_in_beats(IntPtr theme, ref uint cursor_position);
		public uint CursorPositionBeats
		{
			get
			{
				uint cp = 0;
				int res = elias_theme_get_cursor_position_in_beats(this.Handle, ref cp);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return cp;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_active_triggers_on_track")]
		private static extern int elias_theme_get_active_triggers_on_track(IntPtr theme, int track_id, ref int current_trigger, ref int current_trigger_key, ref int pending_trigger, ref int pending_trigger_key);
		public void GetActiveTriggersOnTrack(int track_id, ref int current_trigger, ref int current_trigger_key, ref int pending_trigger, ref int pending_trigger_key)
		{
			int res = elias_theme_get_active_triggers_on_track(this.Handle, track_id, ref current_trigger, ref current_trigger_key, ref pending_trigger, ref pending_trigger_key);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_active_stinger_on_track")]
		private static extern int elias_theme_get_active_stinger_on_track(IntPtr theme, int track_id, ref int current_stinger, ref int current_stinger_key);
		public void GetActiveStingerOnTrack(int track_id, ref int current_stinger, ref int current_stinger_key)
		{
			int res = elias_theme_get_active_stinger_on_track(this.Handle, track_id, ref current_stinger, ref current_stinger_key);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_rendezvous_fade")]
		private static extern int elias_theme_set_rendezvous_fade(IntPtr theme, uint fade);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_rendezvous_fade")]
		private static extern int elias_theme_get_rendezvous_fade(IntPtr theme, ref uint fade);
		public uint RendevouzFade
		{
			set 
			{
				int res = elias_theme_set_rendezvous_fade(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get 
			{
				uint result = 0;
				int res = elias_theme_get_rendezvous_fade(this.Handle, ref result);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return result;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_rendezvous_agility")]
		private static extern int elias_theme_set_rendezvous_agility(IntPtr theme, int agility);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_rendezvous_agility")]
		private static extern int elias_theme_get_rendezvous_agility(IntPtr theme, ref int agility);
		public int RendevouzAgility
		{
			set 
			{
				int res = elias_theme_set_rendezvous_agility(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get 
			{
				int result = 0;
				int res = elias_theme_get_rendezvous_agility(this.Handle, ref result);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return result;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_rendezvous_agility_beat_points")]
		private static extern int elias_theme_set_rendezvous_agility_beat_points(IntPtr theme, uint[] beat_points, uint count);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_rendezvous_agility_beat_points")]
		private static extern int elias_theme_get_rendezvous_agility_beat_points(IntPtr theme, uint[] beat_points, ref uint count);
		public uint[] RendevouzAgilityBeatPoints
		{
			set
			{
				uint sz = (uint)value.Length;
				int res = elias_theme_set_rendezvous_agility_beat_points(this.Handle, value, sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				uint sz = 0;
				int res = elias_theme_get_rendezvous_agility_beat_points(this.Handle, null, ref sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				
				uint[] arr = new uint[sz];
				res = elias_theme_get_rendezvous_agility_beat_points(this.Handle, arr, ref sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				
				return arr;
			}
			
		}

		
		/*
		* Action Presets
		*
		* An action preset is a list of events that can be preconfigured and then triggered at run-time based on its name.
		* The functions below add different types of events to an action preset, with parameters corresponding to the real-time event triggering functions
		* above (elias_theme_set_level, elias_theme_silence and so on).
		* All the parameters such as minimum_level, maximum_level, urgency, stinger, rendezvous etc have the same meaning as in the run-time event triggering functions.
		*
		* All the functions below accept a parameter called preset_name. This UTF-8 string is a unique identifier for an action preset. From within C# a conversion function must be used
		* to guarantee that the string sent is always UTF-8 and not simply works on the local computer. (This is handled by the wrappers!)
		* If you call one or more of the below functions several times with the same identifier name, these events will be added to the end of the list belonging to the
		* existing action preset.
		*
		* The immediately parameter is not applicable on an individual event basis in action presets; immediately is specified when actually triggering the given preset at
		* run-time (see elias_theme_trigger_action_preset).
		*
		* The engine allows the creation of separate action presets that contain events that are only compatible with certain modes, but no single action preset may contain
		* events that create a conflict between modes.
		*/


		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_add_set_level_event", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_add_set_level_event(IntPtr theme, IntPtr preset_name, int minimum_level, int maximum_level, int urgency, int stinger, int rendezvous);
		public void ActionPresetAddSetLevelEvent(string preset_name, int minimum_level, int maximum_level, int urgency, int stinger, int rendezvous)
		{
			
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int res = elias_theme_action_preset_add_set_level_event(this.Handle, s, minimum_level, maximum_level, urgency, stinger, rendezvous);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_add_request_change_event", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_add_request_change_event(IntPtr theme, IntPtr preset_name, int track_count, int urgency, int stinger, int rendezvous);
		public void ActionPresetAddRequestChangeEvent(string preset_name, int track_count, int urgency, int stinger, int rendezvous)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int res = elias_theme_action_preset_add_request_change_event(this.Handle, s, track_count, urgency, stinger, rendezvous);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_add_silence_event", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_add_silence_event(IntPtr theme, IntPtr preset_name, int urgency, int stinger, int rendezvous);
		public void ActionPresetAddSilenceEvent(string preset_name, int urgency, int stinger, int rendezvous)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int res = elias_theme_action_preset_add_silence_event(this.Handle, s, urgency, stinger, rendezvous);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_add_play_stinger_event", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_add_play_stinger_event(IntPtr theme, IntPtr preset_name, int stinger);
		public void ActionPresetAddPlayStingerEvent(string preset_name, int stinger)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int res = elias_theme_action_preset_add_play_stinger_event(this.Handle, s, stinger);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_add_change_key_event", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_add_change_key_event(IntPtr theme, IntPtr preset_name, int key);
		public void ActionPresetAddSetLevelEvent(string preset_name, int key)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int res = elias_theme_action_preset_add_change_key_event(this.Handle, s, key);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}



		/*
		* The below functions perform other tasks related to action presets.
		*/
		
		/*
		* This function checks whether the given action preset exists (0 means false and anything else means true).
		* If the pointer given to this function is NULL, the information will not be filled in.
		* If the function returns an error, the pointer memory remains unmodified.
		*/
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_exists", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_exists(IntPtr theme, IntPtr preset_name, ref int exists);
		public bool ActionPresetExists(string preset_name)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int presetExistsInt = 0;
			int res = elias_theme_action_preset_exists(this.Handle, s, ref presetExistsInt);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return (presetExistsInt != 0);
		}

		
		/*
		* This function checks whether the given action preset is valid in the specified mode (0 means false and anything else means true).
		* mode refers to one of the constants in the elias_modes enum.
		* If the pointer given to this function is NULL, the information will not be filled in.
		* If the function returns an error, the pointer memory remains unmodified.
		*/
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_valid_in_mode", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_valid_in_mode(IntPtr theme, IntPtr preset_name, int mode, ref int valid);
		public bool ActionPresetValidInMode(string preset_name, Elias.Modes mode)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int presetValidInt = 0;
			int res = elias_theme_action_preset_valid_in_mode(this.Handle, s, (int)mode, ref presetValidInt);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return (presetValidInt != 0);
		}

		
		/*
		* This function removes an action preset.
		* preset_name must refer to an existing action preset.
		*
		* Please note that action presets cannot be removed while the engine is rendering audio.
		*/
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_action_preset_remove", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_action_preset_remove(IntPtr theme, IntPtr preset_name);
		public void RemoveActionPreset(string preset_name)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (preset_name);
			int res = elias_theme_action_preset_remove(this.Handle, s);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		
		/*
		* This function retrieves the total number of action presets in the theme.
		* If the pointer given to this function is NULL, the information will not be filled in.
		* If the function returns an error, the pointer memory remains unmodified.
		*/
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_action_preset_count", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_get_action_preset_count(IntPtr theme, ref int count);
		public int ActionPresetGetCount()
		{
			int count = 0;
			int res = elias_theme_get_action_preset_count(this.Handle, ref count);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return count;
		}

		
		/*
		* This function retrieves the name of the action preset indicated by preset_index.
		* preset_index must be between 0 and the total number of action presets in the theme -1 (see elias_theme_get_action_preset_count).
		*
		* name should point to an array containing at least *count bytes, which will be filled in with the requested name after
		* a successful call to this function.
		*
		* If name is NULL, *count will be set to the number of bytes that the name contains (including the NULL terminator). This
		* is useful if you do not know the length of the string in advance and you need to know how much memory to allocate, for instance.
		*
		* If name is non-NULL and the function succeeds, *count is updated to indicate how many bytes that were actually
		* written into the memory pointed to by name. This is true even if name is too small to contain the entire string,
		* in which case the number of bytes that were successfully copied will be indicated by *count. In this scenario the result
		* will always be NULL terminated, and this NULL terminator will be included in the byte count given in *count.
		*
		* count must always be non-NULL.
		*
		* Note that since the string is encoded as UTF-8, the number of bytes is not necessarily the same as the number of
		* actual characters in the string.
		*/
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_action_preset_name", CharSet = CharSet.Unicode)]
		private static extern int  elias_theme_get_action_preset_name(IntPtr theme, int preset_index, IntPtr name, ref int count);
		public string GetActionPresetName(int presetIndex)
		{
			int byteCount = 512;
			IntPtr s = UTF8MarshallingHelpers.CreateOutputStringPointer (byteCount);
			int res = elias_theme_get_action_preset_name(this.Handle, presetIndex, s, ref byteCount);
			string resultString = UTF8MarshallingHelpers.ConvertFromNativeUTF8 (s);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}

			return resultString;
		}






		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_basic_info")]
		private static extern int elias_theme_get_basic_info(IntPtr theme, ref int bpm, ref int timesig_numerator, ref int timesig_denominator, ref int bars, ref int sample_rate, ref int channels);
		public void GetBasicInfo(ref int bpm, ref int timesig_numerator, ref int timesig_denominator, ref int bars, ref int sample_rate, ref int channels)
		{
			int res = elias_theme_get_basic_info(this.Handle, ref bpm, ref timesig_numerator, ref timesig_denominator, ref bars, ref sample_rate, ref channels);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_theme_length_in_milliseconds")]
		private static extern int elias_theme_get_theme_length_in_milliseconds(IntPtr theme, ref uint milliseconds);
		public uint LengthMS
		{
			get
			{
				uint l = 0;
				int res = elias_theme_get_theme_length_in_milliseconds(this.Handle, ref l);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}

				return l;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_theme_length_in_samples")]
		private static extern int elias_theme_get_theme_length_in_samples(IntPtr theme, ref uint samples);
		public uint LengthSamples
		{
			get
			{
				uint l = 0;
				int res = elias_theme_get_theme_length_in_samples(this.Handle, ref l);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				
				return l;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_greatest_trigger")]
		private static extern int elias_theme_get_greatest_trigger(IntPtr theme, ref int greatest_trigger);
		public int GreatestTrigger
		{
			get
			{
				int t = 0;
				int res = elias_theme_get_greatest_trigger(this.Handle, ref t);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				
				return t;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_source_count")]
		private static extern int elias_theme_get_source_count(IntPtr theme, ref uint count);
		public uint SourceCount
		{
			get
			{
				uint result = 0;
				int res = elias_theme_get_source_count(this.Handle, ref result);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return result;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_audio_loop_track_count")]
		private static extern int elias_theme_get_audio_loop_track_count(IntPtr theme, ref uint count);
		public uint AudioLoopTrackCount
		{
			get
			{
				uint result = 0;
				int res = elias_theme_get_audio_loop_track_count(this.Handle, ref result);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return result;
			}
		} 

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_audio_stinger_track_count")]
		private static extern int elias_theme_get_audio_stinger_track_count(IntPtr theme, ref uint count);
		public uint AudioStingerTrackCount
		{
			get
			{
				uint result = 0;
				int res = elias_theme_get_audio_stinger_track_count(this.Handle, ref result);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return result;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_keys")]
		private static extern int elias_theme_get_keys(IntPtr theme, int[] keys, ref uint count);
		public int[] Keys
		{
			get
			{
				uint sz = 0;
				int res = elias_theme_get_keys(this.Handle, null, ref sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				
				int[] arr = new int[sz];
				res = elias_theme_get_keys(this.Handle, arr, ref sz);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}	
				return arr;
			}	
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_volume")]
		private static extern int elias_theme_set_volume(IntPtr theme, int volume);
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_volume")]
		private static extern int elias_theme_get_volume(IntPtr theme, ref int volume);
		public int Volume
		{
			set
			{
				int res = elias_theme_set_volume(this.Handle, value);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
			}
			get
			{
				int vol = 0;
				int res = elias_theme_get_volume(this.Handle, ref vol);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				return vol;
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_create_from_xml", CharSet = CharSet.Unicode)]
		private static extern int elias_theme_create_from_xml(out IntPtr theme_handle, IntPtr xml, IntPtr error, uint error_length, int flags);
		public static Theme CreateFromXML(string xml)
		{
			int byteCount = 512;
			IntPtr errorStringPtr = UTF8MarshallingHelpers.CreateOutputStringPointer (byteCount);
			
			IntPtr xmlPtr = UTF8MarshallingHelpers.ConvertToNativeUTF8 (xml);
			IntPtr h;
			int res = elias_theme_create_from_xml(out h, xmlPtr, errorStringPtr, (uint)byteCount, 0);
			string errorString = UTF8MarshallingHelpers.ConvertFromNativeUTF8 (errorStringPtr);
			UTF8MarshallingHelpers.FreeStringPointer (xmlPtr);

			UTF8MarshallingHelpers.FreeStringPointer (errorStringPtr);
			if(res == 0)
			{
				return new Theme(h);
			} 
			else 
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString() + " : " + errorString);
			}
		}
		
		// IMPORTANT: The playback_decoders function below is not thread safe!
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_prepare_playback_decoders", CharSet = CharSet.Unicode)]
		private static extern int elias_theme_prepare_playback_decoders(IntPtr theme, IntPtr archive_filename, IntPtr theme_directory, IntPtr reader_callbacks, uint flags);
		//This function loads source audio files for theme.
		//if epro file uses relative paths for audio files this function should receive root directory 
		public void LoadSources(string theme_directory, DecoderFlags flags = DecoderFlags.decoder_default)
		{
			IntPtr s = UTF8MarshallingHelpers.ConvertToNativeUTF8 (theme_directory);
			int res = elias_theme_prepare_playback_decoders(this.Handle, IntPtr.Zero, s, IntPtr.Zero, (uint)flags);
			UTF8MarshallingHelpers.FreeStringPointer (s);
			if(res != 0)
			{
				//TODO: This should maybe be a Decoder_Errors isntead?
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString() +  " (" +res.ToString() + ")");
			}
		}

		//This function loads source audio files for theme when they are inside a .apk file.
		//if epro file uses relative paths for audio files this function should receive root directory 
		public void LoadSourcesFromApk(string theme_URI, DecoderFlags flags = DecoderFlags.decoder_default)
		{
			string innerPath;
			string pathToArchive;
			
			int splitIndex = theme_URI.IndexOf('!');
			innerPath = theme_URI.Substring(splitIndex + 2);
			pathToArchive = theme_URI.Remove(splitIndex);
			pathToArchive = pathToArchive.Replace("jar:file:/", "");
			
			IntPtr pathToArchivePtr = UTF8MarshallingHelpers.ConvertToNativeUTF8 (pathToArchive);
			IntPtr innerPathPtr = UTF8MarshallingHelpers.ConvertToNativeUTF8 (innerPath);
			int res = elias_theme_prepare_playback_decoders(this.Handle, pathToArchivePtr, innerPathPtr, IntPtr.Zero, (uint)flags);
			UTF8MarshallingHelpers.FreeStringPointer (pathToArchivePtr);
			UTF8MarshallingHelpers.FreeStringPointer (innerPathPtr);
			if (res != 0)
			{
				//TODO: This should maybe be a Decoder_Errors isntead?
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		public void LoadSourcesFromArchive(string pathToArchive, string pathToThemeDirectory, DecoderFlags flags = DecoderFlags.decoder_default)
		{
			if (pathToArchive.EndsWith ("/") == false && pathToArchive.EndsWith ("\\") == false) 
			{
				pathToArchive += "/";
			}
			
			IntPtr pathToArchivePtr = UTF8MarshallingHelpers.ConvertToNativeUTF8 (pathToArchive);
			IntPtr pathToThemeDirectoryPtr = UTF8MarshallingHelpers.ConvertToNativeUTF8 (pathToThemeDirectory);
			int res = elias_theme_prepare_playback_decoders(this.Handle, pathToArchivePtr, pathToThemeDirectoryPtr, IntPtr.Zero, (uint)flags);
			UTF8MarshallingHelpers.FreeStringPointer (pathToArchivePtr);
			UTF8MarshallingHelpers.FreeStringPointer (pathToThemeDirectoryPtr);
			if (res != 0)
			{
				//TODO: This should maybe be a Decoder_Errors isntead?
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}


		/* UInt32 is an alias for uint, but we use it here to be extra clear on the size when interfacing with the native code. */
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_read_float_samples")]
		private static extern int elias_theme_read_float_samples ( IntPtr theme, float[] buffer, ref UInt32 buffer_size );
		
		public uint ReadFloatSamples(float[] buffer)
		{
			UInt32 sz = (UInt32)buffer.Length;
			Array.Clear(buffer, 0, buffer.Length);
			
			int res = elias_theme_read_float_samples (this.Handle, buffer, ref sz );
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return (uint)sz;
		}
		
		/* UInt32 is an alias for uint, but we use it here to be extra clear on the size when interfacing with the native code. */
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_read_float_samples_blocking")]
		private static extern int elias_theme_read_float_samples_blocking ( IntPtr theme, float[] buffer, UInt32 buffer_size );
		
		public uint ReadFloatSamplesBlocking(float[] buffer)
		{
			UInt32 sz = (UInt32)buffer.Length;
			Array.Clear(buffer, 0, buffer.Length);
			
			int res = elias_theme_read_float_samples_blocking (this.Handle, buffer, sz );
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return (uint)sz;
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_output_sample_rate")]
		private static extern int elias_theme_set_output_sample_rate(IntPtr theme, int sample_rate);
		public void SetOutputSampleRate(int sampleRate)
		{
			int res = elias_theme_set_output_sample_rate (this.Handle, sampleRate );
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}

		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_output_sample_rate")]
		private static extern int elias_theme_get_output_sample_rate(IntPtr theme, ref int sample_rate);
		public int GetOutputSampleRate()
		{
			int sampleRate = 0;
			int res = elias_theme_get_output_sample_rate (this.Handle, ref sampleRate );
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return sampleRate;
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_set_output_channels")]
		private static extern int elias_theme_set_output_channels(IntPtr theme, int channels);
		public void SetOutputChannels(int channels)
		{
			int res = elias_theme_set_output_channels (this.Handle, channels );
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
		}
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_get_output_channels")]
		private static extern int elias_theme_get_output_channels(IntPtr theme, ref int channels);
		public int GetOutputChannels()
		{
			int channels = 0;
			int res = elias_theme_get_output_channels (this.Handle, ref channels );
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			return channels;
		}

		// Flag: Has Dispose already been called? 
		private bool disposed = false;
		
		[DllImport(ELIAS_DLL_NAME, CallingConvention=CallingConvention.Cdecl, EntryPoint="elias_theme_destroy")]
		private static extern int elias_theme_destroy(IntPtr theme);
		public void Destroy()
		{
			int res = elias_theme_destroy(this.Handle);
			if(res != 0)
			{
				ErrorCode e = (ErrorCode)res;
				throw new Exception(e.ToString());
			}
			this.Handle = IntPtr.Zero;
		}

		// Public implementation of Dispose pattern callable by consumers. 
		public void Dispose()
		{ 
			Dispose(true);
			GC.SuppressFinalize(this);           
		}
		
		// Protected implementation of Dispose pattern. 
		protected virtual void Dispose(bool disposing)
		{
			if (disposed)
				return; 
			
			if (disposing) {
				int res = elias_theme_destroy(this.Handle);
				if(res != 0)
				{
					ErrorCode e = (ErrorCode)res;
					throw new Exception(e.ToString());
				}
				this.Handle = IntPtr.Zero;
			}
			
			// Free any unmanaged objects here. 
			//
			disposed = true;
		}
	}
}
